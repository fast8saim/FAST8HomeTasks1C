// MIT License
//
// Copyright (c) 2023 FAST8.RU
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Задание") Тогда
		Задание = Параметры.Задание;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	fast8ИсторияВыполненияЗаданийСрезПоследних.Процесс КАК Процесс,
		|	fast8ИсторияВыполненияЗаданийСрезПоследних.Статус КАК Статус,
		|	fast8ИсторияВыполненияЗаданийСрезПоследних.Исполнитель КАК Исполнитель,
		|	fast8ИсторияВыполненияЗаданийСрезПоследних.Задание.Дата КАК Дата,
		|	fast8ИсторияВыполненияЗаданийСрезПоследних.Регистратор КАК ТекущийДокумент,
		|	fast8ИсторияВыполненияЗаданийСрезПоследних.Задание.Ответственный КАК Автор
		|ИЗ
		|	РегистрСведений.fast8ИсторияВыполненияЗаданий.СрезПоследних(, Задание = &Задание) КАК
		|		fast8ИсторияВыполненияЗаданийСрезПоследних";
		Запрос.УстановитьПараметр("Задание", Задание);
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		Процесс				= Выборка.Процесс;
		Статус				= Выборка.Статус;
		Исполнитель			= Выборка.Исполнитель;
		Дата				= Выборка.Дата;
		ТекущийДокумент		= Выборка.ТекущийДокумент;
		Автор				= Выборка.Автор;
		        		
		ЗаполнитьСписокИсполнителей();
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	fast8ИсторияВыполненияЗаданийСрезПоследних.Исполнитель,
		|	СУММА(ВЫБОР
		|		КОГДА fast8ИсторияВыполненияЗаданийСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.fast8СтатусыЗаданий.Выполнено)
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ) КАК Выполнено,
		|	СУММА(ВЫБОР
		|		КОГДА fast8ИсторияВыполненияЗаданийСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.fast8СтатусыЗаданий.Отменено)
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ) КАК Отменено
		|ИЗ
		|	РегистрСведений.fast8ИсторияВыполненияЗаданий.СрезПоследних(, Процесс = &Процесс) КАК
		|		fast8ИсторияВыполненияЗаданийСрезПоследних
		|ГДЕ
		|	Статус В (ЗНАЧЕНИЕ(Перечисление.fast8СтатусыЗаданий.Выполнено), ЗНАЧЕНИЕ(Перечисление.fast8СтатусыЗаданий.Отменено))
		|СГРУППИРОВАТЬ ПО
		|	fast8ИсторияВыполненияЗаданийСрезПоследних.Исполнитель
		|
		|УПОРЯДОЧИТЬ ПО
		|	Выполнено УБЫВ,
		|	Отменено";
		Запрос.УстановитьПараметр("Процесс", Процесс);
		Статистика.Загрузить(Запрос.Выполнить().Выгрузить());
	КонецЕсли;

	Элементы.Запустить.Видимость					= Ложь;
	Элементы.НазначитьИсполнителя.Видимость			= Ложь;
	Элементы.ПринятьВРаботу.Видимость				= Ложь;
	Элементы.ОтменитьЗадание.Видимость				= Ложь;
	Элементы.Завершить.Видимость					= Ложь;
	Элементы.ПодтвердитьВыполнение.Видимость		= Ложь;
	Элементы.ВернутьНаДоработку.Видимость			= Ложь;

	ЯвляетсяИсполнителем = (Исполнитель = ПараметрыСеанса.fast8ТекущийПользователь);
	
	Если Статус.Пустая() Тогда
		Элементы.Процесс.ТолькоПросмотр				= Ложь;
		Элементы.Дата.Видимость						= Ложь;
		Элементы.Статус.Видимость					= Ложь;
		Элементы.Автор.Видимость					= Ложь;
		Элементы.Запустить.Видимость				= Истина;
				
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	fast8ПроцессыУчастники.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.fast8Процессы.Участники КАК fast8ПроцессыУчастники
		|ГДЕ
		|	fast8ПроцессыУчастники.Пользователь = &Пользователь
		|	И fast8ПроцессыУчастники.Создание";
		Запрос.УстановитьПараметр("Пользователь",	ПараметрыСеанса.fast8ТекущийПользователь);
		Элементы.Процесс.СписокВыбора.Очистить();
		Элементы.Процесс.СписокВыбора.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));		
		Элементы.Статистика.Видимость = Ложь;
	ИначеЕсли Статус = ПредопределенноеЗначение("Перечисление.fast8СтатусыЗаданий.Новое") Тогда
		Элементы.НазначитьИсполнителя.Видимость		= Истина;
		Элементы.ПринятьВРаботу.Видимость			= Истина;
		Элементы.ОтменитьЗадание.Видимость			= Истина;
		Элементы.Завершить.Видимость				= Истина;
		Элементы.Исполнитель.ТолькоПросмотр			= Не РольУправление;
	ИначеЕсли Статус = ПредопределенноеЗначение("Перечисление.fast8СтатусыЗаданий.НазначенИсполнитель") Тогда
		Элементы.НазначитьИсполнителя.Видимость		= Истина;
		Элементы.ПринятьВРаботу.Видимость			= Истина;
		Элементы.ОтменитьЗадание.Видимость			= Истина;
		Элементы.Завершить.Видимость				= Истина;
	ИначеЕсли Статус = ПредопределенноеЗначение("Перечисление.fast8СтатусыЗаданий.ПереданоВРаботу") Тогда
		Элементы.НазначитьИсполнителя.Видимость		= Истина;
		Элементы.ПринятьВРаботу.Видимость			= Истина;
		Элементы.ОтменитьЗадание.Видимость			= Истина;
		Элементы.Завершить.Видимость				= Истина;
	ИначеЕсли Статус = ПредопределенноеЗначение("Перечисление.fast8СтатусыЗаданий.Выполняется") Тогда
		Элементы.НазначитьИсполнителя.Видимость		= Истина;
		Элементы.ОтменитьЗадание.Видимость			= Истина;
		Элементы.Завершить.Видимость				= Истина;
	ИначеЕсли Статус = ПредопределенноеЗначение("Перечисление.fast8СтатусыЗаданий.НаПроверке") Тогда
		Элементы.ОтменитьЗадание.Видимость			= Истина;
		Элементы.ПодтвердитьВыполнение.Видимость	= РольУправление;
		Элементы.ВернутьНаДоработку.Видимость		= РольУправление;
	ИначеЕсли Статус = ПредопределенноеЗначение("Перечисление.fast8СтатусыЗаданий.ВозвращеноНаДоработку") Тогда
		Элементы.НазначитьИсполнителя.Видимость		= Истина;
		Элементы.ОтменитьЗадание.Видимость			= Истина;
		Элементы.Завершить.Видимость				= Истина;
	КонецЕсли;

	Элементы.НазначитьИсполнителя.Видимость	= Элементы.НазначитьИсполнителя.Видимость И РольУправление;
	Элементы.ОтменитьЗадание.Видимость		= Элементы.ОтменитьЗадание.Видимость И РольУправление;
	Элементы.ПринятьВРаботу.Видимость		= Элементы.ПринятьВРаботу.Видимость И (РольИсполнение Или РольУправление) И (ЯвляетсяИсполнителем Или Исполнитель.Пустая());
	Элементы.Завершить.Видимость			= Элементы.Завершить.Видимость И (ЯвляетсяИсполнителем Или РольИсполнение Или РольУправление);
	
	Картинка = ПолучитьНавигационнуюСсылку(Процесс, "Картинка");
		
КонецПроцедуры // ПриСозданииНаСервере()

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Статус.Пустая() Тогда
		ПроверяемыеРеквизиты.Добавить("Процесс");
	ИначеЕсли Статус = ПредопределенноеЗначение("Перечисление.fast8СтатусыЗаданий.Новое") Тогда
		ПроверяемыеРеквизиты.Добавить("Исполнитель");
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроверкиЗаполненияНаСервере()

#КонецОбласти // ОбработчикиСобытийФормы

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПроцессПриИзменении(Элемент)
	
	ЗаполнитьСписокИсполнителей();
	
КонецПроцедуры // ПроцессПриИзменении()

#КонецОбласти // ОбработчикиСобытийЭлементовШапкиФормы

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Запустить(Команда)
	
	Если ЗапуститьНаСервере() Тогда
		ВыполнитьЗакрытиеФормы();
	КонецЕсли;
	
КонецПроцедуры // Запустить()

&НаКлиенте
Процедура НазначитьИсполнителя(Команда)
	
	Если НазначитьИсполнителяНаСервере() Тогда
		ВыполнитьЗакрытиеФормы();
	КонецЕсли;
	
КонецПроцедуры // НазначитьИсполнителя()

&НаКлиенте
Процедура ПринятьВРаботу(Команда)
	
	Если ПринятьВРаботуНаСервере() Тогда
		ВыполнитьЗакрытиеФормы();
	КонецЕсли;
	
КонецПроцедуры // ПринятьВРаботу()

&НаКлиенте
Процедура ОтменитьЗадание(Команда)
	
	Если ОтменитьЗаданиеНаСервере() Тогда
		ВыполнитьЗакрытиеФормы();
	КонецЕсли;
	
КонецПроцедуры // ОтменитьЗадание()

&НаКлиенте
Процедура Завершить(Команда)
	
	Если ЗавершитьНаСервере() Тогда
		ВыполнитьЗакрытиеФормы();
	КонецЕсли;	
	
КонецПроцедуры // Завершить()

&НаКлиенте
Процедура ПодтвердитьВыполнение(Команда)
	
	Если ПодтвердитьВыполнениеНаСервере() Тогда
		ВыполнитьЗакрытиеФормы();
	КонецЕсли;
	
КонецПроцедуры // ПодтвердитьВыполнение()

&НаКлиенте
Процедура ВернутьНаДоработку(Команда)
	
	Если ВернутьНаДоработкуНаСервере() Тогда
		ВыполнитьЗакрытиеФормы();
	КонецЕсли;
	
КонецПроцедуры // ВернутьНаДоработку()

&НаКлиенте
Процедура ЗакрытьФорму(Команда)
	
	ВыполнитьЗакрытиеФормы();
	
КонецПроцедуры // ЗакрытьФорму()

&НаКлиенте
Процедура Повторить(Команда)
	
	ПовторитьНаСервере();
	
КонецПроцедуры // Повторить()

#КонецОбласти // ОбработчикиКомандФормы

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВыполнитьЗакрытиеФормы()
	
	Оповестить("fast8ЗаписанаЗадача");
	Закрыть();
	
КонецПроцедуры // ВыполнитьЗакрытиеФормы()

&НаСервере
Процедура ЗаполнитьСписокИсполнителей()

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	fast8ПроцессыУчастники.Пользователь КАК Пользователь,
	|	fast8ПроцессыУчастники.Исполнение КАК Исполнение,
	|	fast8ПроцессыУчастники.Создание КАК Создание,
	|	fast8ПроцессыУчастники.Контроль КАК Контроль,
	|	fast8ПроцессыУчастники.Управление КАК Управление,
	|	fast8ПроцессыУчастники.ТребуетсяКонтроль КАК ТребуетсяКонтроль,
	|	Ссылка.Описание КАК Описание
	|ИЗ
	|	Справочник.fast8Процессы.Участники КАК fast8ПроцессыУчастники
	|ГДЕ
	|	fast8ПроцессыУчастники.Ссылка = &Процесс
	|	И fast8ПроцессыУчастники.Пользователь = &Пользователь";
	Запрос.УстановитьПараметр("Процесс",		Процесс);
	Запрос.УстановитьПараметр("Пользователь",	ПараметрыСеанса.fast8ТекущийПользователь);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	РольИсполнение		= Выборка.Исполнение;
	РольСоздание		= Выборка.Создание;
	РольКонтроль		= Выборка.Контроль;
	РольУправление		= Выборка.Управление;
	ТребуетсяКонтроль	= Выборка.ТребуетсяКонтроль;
	Описание			= Выборка.Описание;
		
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	fast8ПроцессыУчастники.Пользователь КАК Пользователь
	|ИЗ
	|	Справочник.fast8Процессы.Участники КАК fast8ПроцессыУчастники
	|ГДЕ
	|	fast8ПроцессыУчастники.Ссылка = &Процесс
	|	И (fast8ПроцессыУчастники.Исполнение
	|			ИЛИ &РольУправление = ИСТИНА
	|				И fast8ПроцессыУчастники.Управление)";
	Запрос.УстановитьПараметр("РольУправление", РольУправление);
	
	Элементы.Исполнитель.СписокВыбора.Очистить();
    Элементы.Исполнитель.СписокВыбора.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь"));

	Если Статус.Пустая() И Не Процесс.Пустая() Тогда
		Элементы.Исполнитель.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСписокИсполнителей()

&НаСервере
Функция ЗапуститьНаСервере()
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат Ложь;
	КонецЕсли;

	ВебСервис = fast8ОбменКлиента.ПолучитьПодключение();
	Если ПредварительнаяСинхронизацияНеудачная(ВебСервис) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НовоеЗадание = fast8УправлениеПроцессами.НовоеЗадание(Процесс);
		
	Если ЗначениеЗаполнено(Исполнитель) Тогда
		fast8УправлениеПроцессами.НовоеНазначение(Процесс, НовоеЗадание.Ссылка, Исполнитель, НовоеЗадание.Дата + 1);
	КонецЕсли;

	fast8ОбменКлиента.ОтправитьДанные(ВебСервис);
	ВебСервис = Неопределено;
	
	Возврат Истина;
	
КонецФункции // ЗапуститьНаСервере()

&НаСервере
Функция НазначитьИсполнителяНаСервере()

	Если Не ПроверитьЗаполнение() Тогда
		Возврат Ложь;
	КонецЕсли;

	ВебСервис = fast8ОбменКлиента.ПолучитьПодключение();
	Если ПредварительнаяСинхронизацияНеудачная(ВебСервис) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	fast8УправлениеПроцессами.НовоеНазначение(Процесс, Задание, Исполнитель);

	fast8ОбменКлиента.ОтправитьДанные(ВебСервис);
	ВебСервис = Неопределено;
	
	Возврат Истина;
	
КонецФункции // НазначитьИсполнителяНаСервере()

&НаСервере
Функция ПринятьВРаботуНаСервере()
	
	Если Исполнитель.Пустая() Тогда
		Исполнитель = ПараметрыСеанса.fast8ТекущийПользователь;
	КонецЕсли;

	ВебСервис = fast8ОбменКлиента.ПолучитьПодключение();
	Если ПредварительнаяСинхронизацияНеудачная(ВебСервис) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат Ложь;
	КонецЕсли;
			
	fast8УправлениеПроцессами.НовоеВыполнение(Процесс, Задание, Исполнитель, Ложь, Ложь);

	fast8ОбменКлиента.ОтправитьДанные(ВебСервис);
	ВебСервис = Неопределено;
	
	Возврат Истина;
	
КонецФункции // ПринятьВРаботуНаСервере()

&НаСервере
Функция ЗавершитьНаСервере()

	Если Исполнитель.Пустая() Тогда
		Исполнитель = ПараметрыСеанса.fast8ТекущийПользователь;
	КонецЕсли;
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат Ложь;
	КонецЕсли;

	ВебСервис = fast8ОбменКлиента.ПолучитьПодключение();
	Если ПредварительнаяСинхронизацияНеудачная(ВебСервис) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(ТекущийДокумент) = Тип("ДокументСсылка.fast8ВыполнениеЗадания") Тогда
		fast8УправлениеПроцессами.ОтметитьЗавершениеЗадания(ТекущийДокумент, Истина, Ложь);
	Иначе
		fast8УправлениеПроцессами.НовоеВыполнение(Процесс, Задание, Исполнитель, Истина, Ложь);
	КонецЕсли;

	fast8ОбменКлиента.ОтправитьДанные(ВебСервис);
	ВебСервис = Неопределено;
	
	Возврат Истина;
	
КонецФункции // ЗавершитьНаСервере()

&НаСервере
Функция ПодтвердитьВыполнениеНаСервере()
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат Ложь;
	КонецЕсли;

	ВебСервис = fast8ОбменКлиента.ПолучитьПодключение();
	Если ПредварительнаяСинхронизацияНеудачная(ВебСервис) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	fast8УправлениеПроцессами.НоваяПроверкаЗадания(Процесс, Задание, Исполнитель, Истина, Ложь);

	fast8ОбменКлиента.ОтправитьДанные(ВебСервис);
	ВебСервис = Неопределено;
	
	Возврат Истина;
	
КонецФункции // ПодтвердитьВыполнениеНаСервере()

&НаСервере
Функция ВернутьНаДоработкуНаСервере()
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат Ложь;
	КонецЕсли;

	ВебСервис = fast8ОбменКлиента.ПолучитьПодключение();
	Если ПредварительнаяСинхронизацияНеудачная(ВебСервис) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	fast8УправлениеПроцессами.НоваяПроверкаЗадания(Процесс, Задание, Исполнитель, Ложь, Истина);

	fast8ОбменКлиента.ОтправитьДанные(ВебСервис);
	ВебСервис = Неопределено;
	
	Возврат Истина;
	
КонецФункции // ВернутьНаДоработкуНаСервере()

&НаСервере
Функция ОтменитьЗаданиеНаСервере()
	
    Если Не ПроверитьЗаполнение() Тогда
		Возврат Ложь;
	КонецЕсли;

	ВебСервис = fast8ОбменКлиента.ПолучитьПодключение();
	Если ПредварительнаяСинхронизацияНеудачная(ВебСервис) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДокументВыполнение = Неопределено;
	Если ТипЗнч(ТекущийДокумент) = Тип("ДокументСсылка.fast8ВыполнениеЗадания") Тогда
		ДокументВыполнение = ТекущийДокумент;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	fast8ВыполнениеЗадания.Ссылка КАК Ссылка,
		|	fast8ВыполнениеЗадания.Дата КАК Дата
		|ИЗ
		|	Документ.fast8ВыполнениеЗадания КАК fast8ВыполнениеЗадания
		|ГДЕ
		|	fast8ВыполнениеЗадания.Задание = &Задание
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ";
		Запрос.УстановитьПараметр("Задание", Задание);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ДокументВыполнение = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(ДокументВыполнение) Тогда
		fast8УправлениеПроцессами.ОтметитьЗавершениеЗадания(ДокументВыполнение, Ложь, Истина);
	Иначе
		fast8УправлениеПроцессами.НовоеВыполнение(Процесс, Задание, Исполнитель, Ложь, Истина);
	КонецЕсли;

	fast8ОбменКлиента.ОтправитьДанные(ВебСервис);
	ВебСервис = Неопределено;
	
	Возврат Истина;
	
КонецФункции // ОтменитьЗаданиеНаСервере()

&НаСервере
Функция ПредварительнаяСинхронизацияНеудачная(ВебСервис)
	
	Если fast8ОбменКлиента.ПолучитьНовыеДанные(ВебСервис) Тогда
		Возврат Ложь;
	Иначе
		ВебСервис = Неопределено;
		Возврат Истина;
	КонецЕсли;
	
КонецФункции // ПредварительнаяСинхронизацияНеудачная()

&НаСервере
Процедура ПовторитьНаСервере()
	
	Если Автор = ПараметрыСеанса.fast8ТекущийПользователь Тогда
		Документ = ТекущийДокумент.ПолучитьОбъект();
		Документ.Записать();
	КонецЕсли;
		
	ВебСервис = fast8ОбменКлиента.ПолучитьПодключение();
	fast8ОбменКлиента.ПолучитьНовыеДанные(ВебСервис);
	fast8ОбменКлиента.ОтправитьДанные(ВебСервис);
	ВебСервис = Неопределено;
	
КонецПроцедуры // ПовторитьНаСервере()

#КонецОбласти // СлужебныеПроцедурыИФункции
