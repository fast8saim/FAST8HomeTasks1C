// MIT License
//
// Copyright (c) 2023 FAST8.RU
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	#Если МобильноеПриложениеСервер Тогда
	Элементы.ГруппаАдминистративныйИнтерфейс.Видимость = Ложь;
	Элементы.Картинка.Гиперссылка = Ложь;
	#КонецЕсли
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	fast8ИсторияВыполненияЗаданийСрезПоследних.Исполнитель,
	|	СУММА(ВЫБОР
	|		КОГДА fast8ИсторияВыполненияЗаданийСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.fast8СтатусыЗаданий.Выполнено)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК Выполнено,
	|	СУММА(ВЫБОР
	|		КОГДА fast8ИсторияВыполненияЗаданийСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.fast8СтатусыЗаданий.Отменено)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК Отменено
	|ИЗ
	|	РегистрСведений.fast8ИсторияВыполненияЗаданий.СрезПоследних(, Процесс = &Процесс) КАК
	|		fast8ИсторияВыполненияЗаданийСрезПоследних
	|ГДЕ
	|	Статус В (ЗНАЧЕНИЕ(Перечисление.fast8СтатусыЗаданий.Выполнено), ЗНАЧЕНИЕ(Перечисление.fast8СтатусыЗаданий.Отменено))
	|СГРУППИРОВАТЬ ПО
	|	fast8ИсторияВыполненияЗаданийСрезПоследних.Исполнитель
	|
	|УПОРЯДОЧИТЬ ПО
	|	Выполнено УБЫВ,
	|	Отменено";
	Запрос.УстановитьПараметр("Процесс", Объект.Ссылка);
	Статистика.Загрузить(Запрос.Выполнить().Выгрузить());
	
	Картинка = ПолучитьНавигационнуюСсылку(Объект.Ссылка, "Картинка");
		
КонецПроцедуры // ПриСозданииНаСервере()

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ЗначениеЗаполнено(АдресВременнойКартинки) Тогда 
		ДанныеКартинки = ПолучитьИзВременногоХранилища(АдресВременнойКартинки);
		ТекущийОбъект.Картинка = Новый ХранилищеЗначения(ДанныеКартинки);
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписьюНаСервере()

#КонецОбласти // ОбработчикиСобытийФормы

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КартинкаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	НачатьПомещениеФайла(Новый ОписаниеОповещения("ЗагрузитьКартинкуЗавершение", ЭтотОбъект), АдресВременнойКартинки,, Истина, УникальныйИдентификатор);
	
КонецПроцедуры // КартинкаНажатие()

#КонецОбласти // ОбработчикиСобытийЭлементовШапкиФормы

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасписание

&НаКлиенте
Процедура РасписаниеПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Расписание.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ЗаполнитьСписокВыбораЕдиницы(ТекущиеДанные.Вид);
	КонецЕсли;
	
КонецПроцедуры // РасписаниеПриАктивизацииСтроки()

&НаКлиенте
Процедура РасписаниеВидПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Расписание.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ЗаполнитьСписокВыбораЕдиницы(ТекущиеДанные.Вид);
		Если ТекущиеДанные.Вид = ПредопределенноеЗначение("Перечисление.fast8ВидыПериодов.Недельное") Тогда
			ТекущиеДанные.Порядок = 0;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // РасписаниеВидПриИзменении()

#КонецОбласти // ОбработчикиСобытийЭлементовТаблицыФормыРасписание

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ЗаполнитьСписокВыбораЕдиницы(Вид)
	
	Элементы.РасписаниеЕдиница.СписокВыбора.Очистить();
	Если Вид = ПредопределенноеЗначение("Перечисление.fast8ВидыПериодов.Датой") Тогда
		Элементы.РасписаниеЕдиница.СписокВыбора.Очистить();
		Элементы.РасписаниеЕдиница.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.fast8ВидыЕдиницПериода.День"));
		Элементы.РасписаниеПорядок.МинимальноеЗначение = 1;
		Элементы.РасписаниеПорядок.МаксимальноеЗначение = 366;
	ИначеЕсли Вид = ПредопределенноеЗначение("Перечисление.fast8ВидыПериодов.Недельное") Тогда
		Элементы.РасписаниеЕдиница.СписокВыбора.Очистить();
		Элементы.РасписаниеЕдиница.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.fast8ВидыЕдиницПериода.Понедельник"));
		Элементы.РасписаниеЕдиница.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.fast8ВидыЕдиницПериода.Вторник"));
		Элементы.РасписаниеЕдиница.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.fast8ВидыЕдиницПериода.Среда"));
		Элементы.РасписаниеЕдиница.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.fast8ВидыЕдиницПериода.Четверг"));
		Элементы.РасписаниеЕдиница.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.fast8ВидыЕдиницПериода.Пятница"));
		Элементы.РасписаниеЕдиница.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.fast8ВидыЕдиницПериода.Суббота"));
		Элементы.РасписаниеЕдиница.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.fast8ВидыЕдиницПериода.Воскресенье"));
		Элементы.РасписаниеПорядок.МинимальноеЗначение = 0;
		Элементы.РасписаниеПорядок.МаксимальноеЗначение = 0;
	ИначеЕсли Вид = ПредопределенноеЗначение("Перечисление.fast8ВидыПериодов.Месячное") Тогда
		Элементы.РасписаниеЕдиница.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.fast8ВидыЕдиницПериода.День"));
		Элементы.РасписаниеЕдиница.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.fast8ВидыЕдиницПериода.Понедельник"));
		Элементы.РасписаниеЕдиница.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.fast8ВидыЕдиницПериода.Вторник"));
		Элементы.РасписаниеЕдиница.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.fast8ВидыЕдиницПериода.Среда"));
		Элементы.РасписаниеЕдиница.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.fast8ВидыЕдиницПериода.Четверг"));
		Элементы.РасписаниеЕдиница.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.fast8ВидыЕдиницПериода.Пятница"));
		Элементы.РасписаниеЕдиница.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.fast8ВидыЕдиницПериода.Суббота"));
		Элементы.РасписаниеЕдиница.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.fast8ВидыЕдиницПериода.Воскресенье"));
		Элементы.РасписаниеПорядок.МинимальноеЗначение = 1;
		Элементы.РасписаниеПорядок.МаксимальноеЗначение = 31;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСписокВыбораЕдиницы()

&НаКлиенте
Процедура ЗагрузитьКартинкуЗавершение(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если Результат = Истина Тогда 
		АдресВременнойКартинки = Адрес;
		Картинка = АдресВременнойКартинки;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры // ЗагрузитьКартинкуЗавершение()

#КонецОбласти // СлужебныеПроцедурыИФункции
